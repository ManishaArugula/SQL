#total sales 
select sum(Amount) as Revenue
 from sales;
 
#total number of boxes sold
select sum(Boxes) as Units
 from sales;
 
 #Number of customers sold to
 select  sum(customers)  as num_customers from sales;
 
 ##Shipment count
 
 select count(*) as shipments  from sales;
 
 ## calculate the cost_price
 select *, (boxes * cost_per_box) as cost_price  from sales
 join products on sales.pid = products.pid;
 
 #Calculate the profit generated by the company
 select sum(amount) - sum((boxes * cost_per_box)) as profit  from sales
  join products on sales.pid = products.pid;
  
#calculate the profit margin
 select ((sum(amount) - sum((boxes * cost_per_box)))/ sum(amount))*100 as profit_margin
 from sales
  join products on sales.pid = products.pid;
  
#Top geo location with highest sales
select b.GeoID, Geo, Sales from geo join
(select GeoID, sum(Amount) as Sales
  from sales 
  group by GeoID) as b
  on geo.GeoID = b.GeoID
  order by sales desc
  Limit 1;

#Most sold product overall
select a.PID, Product, sales from products join
(select PID, sum(Amount) as sales from sales
group by PID) as a on
products.PID =a.PID
order by sales desc;

# highest number of customers reached by a salesperson
select spid, sum(customers) as total_customers from sales
group by spid
order by total_sales desc;

#Salesperson with highest sales overall
select b.*, dense_rank() over(order by b.total_Sales desc) as ranking from 
(select a.SPID, Salesperson, total_sales from people join 
(select SPID, sum(Amount) as total_sales
 from sales
 group by SPID) as a on people.SPID = a.SPID) as b;
 
 #Salesperson with highest sales based on geo location
 with cte as (
 select c.* from (
 select b.*, rank() over(partition by geoid order by total_sales desc ) as ranking from (
 select SPID, geoID ,sum(Amount) as total_sales
 from sales
 group by SPID, geoID) as b) as c
 where ranking =1
 )
 
 select geo.geo, people.salesperson, cte.total_sales, people.location as emp_loc from cte 
 left join geo on cte.geoid =geo.geoid
 left join people on cte.spid =people.spid
 order by cte.total_sales desc;
 
 #Number of people in each team 
 select team, count(*) as total_members from people
 group by team
 order by total_members desc;

#Which team has made the highest sales, count the number of people in the team
## does more people in a team means more sales?
select people.team, sum(Amount) as total_sales, count(distinct sales.spid) as total_members from sales
 left join people on sales.spid = people.spid
group by people.team
order by total_sales desc;

##List of members who are not in the sales table 

select count(distinct spid) as memebers_in_sales from sales; #25
select count(distinct spid)as members_in_people from people; #33

select  * from people
where  spid not in (select distinct spid from sales);

#SalesDate with the most sales

select saledate, sum(amount) as total_sales  from sales 
group by saledate;

##Which month has genearted more sales, do not consider the year or date

select date_format(saledate,'%M') as month_of_year, sum(amount) as total_sales  from sales 
group by date_format(saledate,'%M')
order by total_sales desc;

##Which year has genearted more sales, do not consider the month or date
select date_format(saledate,'%Y') as month_of_year, sum(amount) as total_sales  from sales 
group by date_format(saledate,'%Y')
order by total_sales desc;

# top 3 months  with the highest revenue year-wise

select b.* from (
select a.*, dense_rank() over(partition by sale_year order by total_sales desc) as ranking from
(select  date_format(saledate, '%Y') as sale_year, date_format(saledate, '%m') as sale_month
, sum(amount) as total_sales from sales
group by  date_format(saledate, '%Y'), date_format(saledate, '%m') )
as a) as b
where ranking <=3;
 
#most sold products in each geo location

with cte as (
select a.*, dense_rank() over(partition by geoid order by total_sales desc ) as ranking from (
select geoid, pid, sum(Amount) as total_sales from sales
group by geoid, pid
) as a
) 

select cte.geoid,geo.geo, cte.pid, products.product ,total_sales from cte
join products on cte.pid = products.pid 
join geo on cte.geoid = geo.geoid
 where ranking =1;

## product avg sales and their range 

select a.*,  case when a.avg_sales > (select avg(amount) as total_avg_sales
 from sales) then 'greater than avg sales'
 else 'less than avg sales' end as sales_range from (
select pid, avg(amount) as avg_sales 
 from sales
group by pid) as a




 


